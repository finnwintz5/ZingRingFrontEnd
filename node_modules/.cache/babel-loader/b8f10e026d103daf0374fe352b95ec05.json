{"ast":null,"code":"var _jsxFileName = \"/Users/umphaipunatipunumphai/Documents/NUS/ZingRingWeb/src/components/BothCharts.js\";\nimport PieGraph from \"./GraphPie\";\nimport LineGraph from \"./GraphLine\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport './style/display.css';\nimport format from \"date-fns/format\";\nimport parse from \"date-fns/parse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction prop_len(str) {\n  let temp = str.toString();\n  if (temp.length == 1) {\n    return \"0\" + temp;\n  }\n  return temp;\n}\nfunction month_day(day, month, days_sub) {\n  if (days_sub >= day) {\n    month -= 1;\n    day = 31 - (days_sub - day);\n  } else {\n    day -= days_sub;\n  }\n  return prop_len(month) + prop_len(day);\n}\nfunction get_current_datetime(range) {\n  var currentdate = new Date();\n  var datetime = \"\";\n  // console.log(range);\n  if (range == \"Year\") {\n    datetime += prop_len(currentdate.getFullYear() - 1);\n  } else {\n    datetime += prop_len(currentdate.getFullYear());\n  }\n  if (range == \"Month\") {\n    datetime += prop_len(currentdate.getMonth());\n    datetime += prop_len(currentdate.getDate());\n  } else if (range == \"Week\") {\n    datetime += month_day(currentdate.getDate(), currentdate.getMonth() + 1, 7);\n  } else if (range == \"Day\") {\n    datetime += month_day(currentdate.getDate(), currentdate.getMonth() + 1, 1);\n  } else {\n    datetime += prop_len(currentdate.getMonth() + 1);\n    datetime += prop_len(currentdate.getDate());\n  }\n  datetime += prop_len(currentdate.getHours()) + prop_len(currentdate.getMinutes()) + prop_len(currentdate.getSeconds());\n  // console.log(datetime);\n  if (range == \"All\") {\n    return \"0\";\n  }\n  return datetime;\n}\nconst BothCharts = _ref => {\n  let {\n    records,\n    range\n  } = _ref;\n  const formatDate = datetime => {\n    if (datetime !== null) {\n      let str_version = datetime.toString();\n      if (str_version.length == 1) {\n        return \"N/A\";\n      }\n      return str_version.substring(0, 4) + \"/\" + str_version.substring(4, 6) + \"/\" + str_version.substring(6, 8) + \" \" + str_version.substring(8, 10) + \":\" + str_version.substring(10, 12); // NOT SURE HOW WE WANT TO FORMAT THIS!!!\n    }\n  };\n\n  var start_time = parseInt(get_current_datetime(range));\n  var end_time = parseInt(get_current_datetime(\"other\"));\n  // console.log(formatDate(start_time));\n  // console.log(formatDate(end_time));\n  let last_text = \"\";\n  if (range == \"All\") {\n    last_text = \"All Time:\";\n  } else {\n    last_text = \"Last \" + range + \":\";\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"graph-card\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        paddingTop: \"20px\"\n      },\n      children: last_text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\" + formatDate(start_time) + \"] to [\" + formatDate(end_time) + \"]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        sm: 8,\n        children: /*#__PURE__*/_jsxDEV(LineGraph, {\n          records: records,\n          timeMin: String(start_time),\n          timeMax: String(end_time),\n          range: range\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 4,\n        children: /*#__PURE__*/_jsxDEV(PieGraph, {\n          records: records,\n          start_time: start_time,\n          range: range\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_c = BothCharts;\nexport default BothCharts;\nvar _c;\n$RefreshReg$(_c, \"BothCharts\");","map":{"version":3,"names":["PieGraph","LineGraph","Row","Col","Card","format","parse","prop_len","str","temp","toString","length","month_day","day","month","days_sub","get_current_datetime","range","currentdate","Date","datetime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","BothCharts","records","formatDate","str_version","substring","start_time","parseInt","end_time","last_text","textAlign","paddingTop","String"],"sources":["/Users/umphaipunatipunumphai/Documents/NUS/ZingRingWeb/src/components/BothCharts.js"],"sourcesContent":["import PieGraph from \"./GraphPie\";\nimport LineGraph from \"./GraphLine\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport './style/display.css';\nimport format from \"date-fns/format\";\nimport parse from \"date-fns/parse\";\n\n\nfunction prop_len(str) {\n    let temp=str.toString();\n    if (temp.length==1) {\n      return \"0\"+temp;\n    }\n    return temp;\n  }\n  \n  function month_day(day,month,days_sub) {\n    if (days_sub>=day) {\n      month-=1;\n      day=31-(days_sub-day);\n    } else {\n      day-=days_sub;\n    }\n    return (prop_len(month)+prop_len(day));\n  }\n  \nfunction get_current_datetime(range) {\n    var currentdate = new Date();\n    var datetime=\"\";\n    // console.log(range);\n    if (range==\"Year\") {\n      datetime+=prop_len(currentdate.getFullYear()-1);\n    } else {\n      datetime+=prop_len(currentdate.getFullYear());\n    }\n    if (range==\"Month\") {\n      datetime+=prop_len(currentdate.getMonth());\n      datetime+=prop_len(currentdate.getDate());\n    } else if (range==\"Week\") {\n      datetime+=month_day(currentdate.getDate(),currentdate.getMonth()+1,7);\n    } else if (range==\"Day\") {\n      datetime+=month_day(currentdate.getDate(),currentdate.getMonth()+1,1);\n    } else {\n      datetime+=prop_len(currentdate.getMonth()+1);\n      datetime+=prop_len(currentdate.getDate());\n    }\n    datetime+= prop_len(currentdate.getHours())+prop_len(currentdate.getMinutes())+ prop_len(currentdate.getSeconds());\n    // console.log(datetime);\n    if (range==\"All\") {\n        return \"0\";\n    }\n    return datetime;\n  }\n\nconst BothCharts = ({records, range}) => {\n    const formatDate = (datetime) => {\n        if(datetime !== null){\n            let str_version=datetime.toString();\n            if (str_version.length==1) {\n                return \"N/A\";\n            }\n            return str_version.substring(0,4)+\"/\"+str_version.substring(4,6)+\"/\"\n                +str_version.substring(6,8)+\" \"+str_version.substring(8,10)+\":\"\n                +str_version.substring(10,12); // NOT SURE HOW WE WANT TO FORMAT THIS!!!\n        }\n    }\n    var start_time=parseInt(get_current_datetime(range));\n    var end_time=parseInt(get_current_datetime(\"other\"));\n    // console.log(formatDate(start_time));\n    // console.log(formatDate(end_time));\n    let last_text=\"\";\n    if (range==\"All\") {\n        last_text=\"All Time:\";\n    } else {\n        last_text=\"Last \"+range+\":\";\n    }\n    return(\n        <Card className=\"graph-card\" style={{textAlign: \"center\"}}>\n            <h3 style={{paddingTop: \"20px\"}}>{last_text}</h3>\n            <p>{\"[\"+formatDate(start_time)+\"] to [\"+formatDate(end_time)+\"]\"}</p>\n            <Row>\n                <Col sm={8}>\n                    <LineGraph records={records} timeMin={String(start_time)} timeMax={String(end_time)} range={range}/>\n                </Col>\n                <Col sm={4}>\n                        <PieGraph records={records} start_time={start_time} range={range}/>\n                </Col>\n            </Row>\n        </Card>\n    );\n}\n\nexport default BothCharts;"],"mappings":"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"},"metadata":{},"sourceType":"module"}